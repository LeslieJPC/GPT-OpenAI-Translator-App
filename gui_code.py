
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
import pyttsx3
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk
from tkinter import messagebox
from datetime import datetime
import speech_recognition as sr
import tkinter as tk
import openai
from key import API_KEY

openai.api_key = API_KEY

language_options = [
    "",
    "English",
    "Spanish",
    "French",
    "German",
    "Chinese (Simplified)",
    "Chinese (Traditional)",
    "Japanese",
    "Korean",
    "Italian",
    "Portuguese",
    "Dutch",
    "Russian",
    "Arabic",
    "Turkish",
    "Hindi",
    "Swedish",
    "Danish",
    "Norwegian",
    "Finnish",
    "Greek",
    "Polish",
    "Hungarian",
    "Czech",
    "Romanian",
    "Hebrew",
    "Thai",
    "Vietnamese",
    "Indonesian",
    "Malay"
]

source_language = ""
translate_language = ""


# Function to detect the language of user inputs
def language_detection(inputs, detected_language):
    # Create a chat completion request to GPT-3 for language detection
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "In the role of a Language detector. Detect the language from users inputs. Return only one word answers."},
            {"role": "user", "content": inputs}
        ],
        temperature=0.2,
    )
    
    # Extract the detected language from the response
    detected_language = completion.choices[0].message.content 
    
    # Return the detected language
    return detected_language

# Function to get translation of user inputs
def get_translation(inputs, language2, detected_language):
    try:
        # Create a chat completion request to GPT-3 for translation
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": f"In the role of a language translator. Translate the text to {language2}."},
                {"role": "user", "content": inputs}
            ],
            temperature=0.2,
        )
        
        # Extract the translated text from the response
        chatReply = completion.choices[0].message.content
        
        # Return the translated text
        return chatReply
    
    except Exception as e:
        # Print an error message if translation fails and return None
        print("Error occurred during translation:", e)
        return None


# Function to translate user input to the selected language
def translate_text():
    # Declare global variables to store source and target languages
    global source_language
    global translate_language
    
    # Get the selected translation language from the GUI dropdown
    translate_language = selected_language.get()
    
    # Get user input text from the GUI entry field (entry_3)
    user_input = entry_3.get("1.0", "end-1c") 
    # Explanation: 1.0 refers to the beginning of the Text widget (line 1, column 0)
    # "end-1c" goes to the end of the Text widget excluding the last character (usually a newline)

    # Check if either translation language or user input is empty
    if not translate_language.strip() or not user_input.strip():
        # Show an error message box if any field is empty
        messagebox.showerror("Error", "Please fill in all fields.")
        return

    # Detect the source language using a language detection function
    source_language = language_detection(user_input, source_language)

    # Get the translation of the user input
    translation = get_translation(user_input, translate_language, source_language)
    
    # Clear any previous translations from the GUI entry field (entry_4)
    entry_4.delete("1.0", "end")
    
    # Insert the new translation into the GUI entry field (entry_4)
    entry_4.insert("1.0", translation)

# Function to reverse the translation and go back to the original language
def reverse_translation():
    # Declare global variables to store source and target languages
    global source_language
    global translate_language
    
    # Get user input text from the GUI entry field (entry_4)
    user_input = entry_4.get("1.0", "end-1c")
    
    # Check if either translation language or user input is empty
    if not translate_language.strip() or not user_input.strip():
        # Show an error message box if any field is empty
        messagebox.showerror("Error", "Please fill in all fields. There is no translation to reverse.")
        return

    # Swap the values of translation and source languages to reverse the translation
    translate_language, source_language = source_language, translate_language
    
    # Get the reversed translation using the swapped languages
    translation = get_translation(user_input, translate_language, source_language)
    
    # Clear any previous translations from the GUI entry field (entry_4)
    entry_4.delete("1.0", "end")
    
    # Insert the new translation into the GUI entry field (entry_4)
    entry_4.insert("1.0", translation)
    

# Function to read out the translated text using text-to-speech
def read_translation():
    # Initialize the text-to-speech engine
    engine = pyttsx3.init()

    # Get the translated text from the GUI entry field (entry_4)
    translated_text = entry_4.get("1.0", "end-1c")

    # Instruct the text-to-speech engine to say the translated text
    engine.say(translated_text)

    # Wait for the speech to finish
    engine.runAndWait()

# Function to convert speech to text using microphone input
def speech_to_text():
    # Initialize a speech recognizer
    recognizer = sr.Recognizer()

    # Open the microphone and capture audio
    with sr.Microphone() as source_language:
        # Record audio for a duration of 5 seconds
        audio_data = recognizer.record(source_language, duration=5)

        # Recognize the audio and convert it to text using Google's speech recognition
        text = recognizer.recognize_google(audio_data)

        # Return the recognized text
        return text

# Function to get speech input and display it in an entry field
def get_speech_input():
    # Call the speech_to_text function to convert speech to text
    speech = speech_to_text()

    # Clear existing content from the GUI entry field (entry_3)
    entry_3.delete("1.0", "end")

    # Insert the converted speech-to-text into the GUI entry field (entry_3)
    entry_3.insert("1.0", speech)

def clear_all_textboxes_and_entry():
    clear_entry_text()
    clear_all_textboxes()

def clear_all_textboxes():
    global source_language
    global translate_language
    source_language = ""
    translate_language = ""
    entry_3.delete("1.0", "end") #clears the "what would you like to translate" area
    entry_4.delete("1.0", "end") #clears the "translation" area
    entry_2.set(value="")

def clear_entry_text():
    entry_2.delete(0, tk.END)#clears the "to" area

def get_current_time():
    now = datetime.now()
    formatted_time = now.strftime("%I:%M")  # %I represent 12 hour clock %M represents the minute (12:01)
    return formatted_time

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "frame0" # frame0 folder holds all the png's we are using 

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

window.geometry("390x844")
window.configure(bg = "#E69F00")

selected_language = tk.StringVar()

# Set an initial value for the variable
selected_language.set(language_options[0])

canvas = Canvas(
    window,
    bg = "#E69F00",
    height = 844,
    width = 390,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    390.0,
    22.0,
    fill="#56B4E9",
    outline="")

canvas.create_text(
    8.0,
    7.0,
    anchor="nw",
    text=get_current_time(),
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_rectangle(
    0.0,
    22.0,
    390.0,
    74.0,
    fill="#56B4E9",
    outline="")

canvas.create_rectangle(
    0.0,
    812.0,
    390.0,
    844.0,
    fill="#56B4E9",
    outline="")

canvas.create_rectangle(
    0.0,
    129.0,
    390.0,
    284.0,
    fill="#56B4E9",
    outline="")

canvas.create_text(
    130.0,
    154.0,
    anchor="nw",
    text="Translate to:",
    fill="#000000",
    font=("Inter Bold", 21 * -1),
)

entry_2 = ttk.Combobox(
    window, 
    textvariable=selected_language, 
    values=language_options, 
    state="readonly"
    )
style= ttk.Style()
style.theme_use('clam')
style.configure("TCombobox", background= "white", fieldbackground="white")
entry_2.place(
    x=88.0,
    y=204.0,
    width=218.0,
    height=29.0
)

canvas.create_text(
    98.0,
    33.0,
    anchor="nw",
    text="Translator App",
    fill="#000000",
    font=("Inter Bold", 26 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    193.5,
    409.0,
    image=entry_image_3
)
entry_3 = Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=18.0,
    y=347.0,
    width=351.0,
    height=122.0
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    196.5,
    641.0,
    image=entry_image_4
)
entry_4 = Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=21.0,
    y=579.0,
    width=351.0,
    height=122.0
)

canvas.create_text(
    21.0,
    313.0,
    anchor="nw",
    text="What would you like translated?",
    fill="#000000",
    font=("Inter Bold", 21 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=clear_all_textboxes_and_entry,
    relief="flat"
)
button_1.place(
    x=130.0,
    y=718.0,
    width=127.0,
    height=32.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=translate_text,
    relief="flat"
)
button_2.place(
    x=130.0,
    y=486.0,
    width=127.0,
    height=32.0
)

canvas.create_text(
    24.0,
    541.0,
    anchor="nw",
    text="translation:",
    fill="#000000",
    font=("Inter Bold", 21 * -1)
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=7.0,
    y=28.0,
    width=52.0,
    height=41.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    354.0,
    48.0,
    image=image_image_1
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=reverse_translation,
    relief="flat"
)
button_4.place(
    x=3.0,
    y=238.0,
    width=56.0,
    height=38.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=read_translation,
    relief="flat"
)
button_5.place(
    x=314.0,
    y=537.0,
    width=55.0,
    height=37.0
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    48.0,
    830.0,
    image=image_image_2
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=get_speech_input,
    relief="flat"
)
button_6.place(
    x=16.0,
    y=751.0,
    width=58.0,
    height=51.0
)
window.resizable(False, False)
window.mainloop()
